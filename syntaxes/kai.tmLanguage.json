{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "kainoki",
    "scopeName": "text.penn.kai",
    "patterns": [
        {
            "include": "#nodes"
        }
    ],
    "repository": {
        "non-terminals": {
            "patterns": [
                {
                    "name": "entity.name.type.kai",
                    "match": "(multi-sentence|CP-FINAL|FRAG-IMP|IP-CONJ|IP-SCON|NP-SBJ2|PP-SNJ2|PP-CONJ|PP-SCON|CP-EXL|CP-QUE|CP-THT|IP-EMB|IP-ADV|IP-CND|IP-IMP|IP-MAT|IP-REL|IP-SUB|IP-NML|IP-SMC|NP-ADV|NP-LGS|NP-LOC|NP-MSR|NP-OB1|NP-OB2|NP-POS|NP-PRD|NP-SBJ|NP-TMP|NP-TPC|NP-VOC|NUMCLP|PP-ADV|PP-LGS|PP-LOC|PP-MSR|PP-OB1|PP-OB2|PP-PRD|PP-SBJ|PP-TMP|PP-TPC|PP-VOC|PP-PRP|PP-CND|CONJP|INTJP|ADVP|FRAG|PNLP|NML|PRN|FS|NP|PP)\\b"
                }
            ]
        },
        "terminals":{
            "patterns": [
                {
                    "name": "variable.language.kai",
                    "match": "(P-FINAL|P-COMP|P-CONN|P-OPTR|P-ROLE|-LRB-|-RRB-|QUOT|ADJI|ADJN|WADV|WNUM|CONJ|INTJ|WPRO|SYM|PNL|ADV|AXD|NEG|NUM|NPR|PRO|VB0|VB2|PU|FN|AX|MD|CL|WD|QN|FW|VB|ID|D|Q|N|P)\\b"
                }
            ]
        },
        "operators":{
            "patterns": [
                {
                    "name": "constant.language.kai",
                    "match": "(\\*speaker+hearer\\*|\\*speaker+pro\\*|\\*hearer+pro\\*|\\*speaker\\*|\\*hearer\\*|\\*pro\\*|\\*arb\\*|\\*exp\\*|\\*\\*\\*|\\*.e\\*|\\*T\\*)"
                }
            ]
        },
        "nodes": {
            "patterns":[
                {
                    "name": "brackets.kai",
                    "begin": "\\((\\S+)?",
                    "end": "\\)",
                    "beginCaptures": {
                        "1":{
                            "patterns": [
                                {
                                    "include": "#first-nodes--labels"
                                }
                            ]
                        }
                    },
                    "patterns": [
                        {
                            "include": "#operators"
                        },
                        {
                            "include": "#nodes"
                        }
                    ]
                }
            ]
        },
        "first-nodes--labels":{
            "patterns": [
                {
                    "match": "(multi-sentence|CP-FINAL|FRAG-IMP|P-FINAL|IP-CONJ|IP-SCON|NP-SBJ2|PP-SNJ2|PP-CONJ|PP-SCON|P-COMP|P-CONN|P-OPTR|P-ROLE|CP-EXL|CP-QUE|CP-THT|IP-EMB|IP-ADV|IP-CND|IP-IMP|IP-MAT|IP-REL|IP-SUB|IP-NML|IP-SMC|NP-ADV|NP-LGS|NP-LOC|NP-MSR|NP-OB1|NP-OB2|NP-POS|NP-PRD|NP-SBJ|NP-TMP|NP-TPC|NP-VOC|NUMCLP|PP-ADV|PP-LGS|PP-LOC|PP-MSR|PP-OB1|PP-OB2|PP-PRD|PP-SBJ|PP-TMP|PP-TPC|PP-VOC|PP-PRP|PP-CND|-LRB-|-RRB-|CONJP|INTJP|QUOT|ADJI|ADJN|WADV|WNUM|CONJ|INTJ|WPRO|ADVP|FRAG|PNLP|SYM|PNL|ADV|AXD|NEG|NUM|NPR|PRO|VB0|VB2|NML|PRN|PU|FN|AX|MD|CL|WD|QN|FW|VB|ID|FS|NP|PP|D|Q|N|P)?(.*)",
                    "captures": {
                        "1":{
                            "patterns": [
                                {
                                    "include": "#non-terminals"
                                },
                                {
                                    "include": "#terminals"
                                }
                            ]
                        },
                        "2":{
                            "patterns": [
                                {
                                    "include": "#first-nodes--ICHeds"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "first-nodes--ICHeds":{
            "patterns": [
                {
                    "match": "(?:-([1-9]\\d*))?(.*)",
                    "captures": {
                        "1":{
                            "name": "constant.numeric.kai"
                        },
                        "2":{
                            "patterns": [
                                {
                                    "include": "#first-nodes--sort-infos"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "first-nodes--sort-infos":{
            "patterns": [
                {
                    "match": "(?:\\;\\{(\\S+)\\})?.*",
                    "captures": {
                        "1":{
                            "name": "entity.other.attribute-name.kai"
                        }
                    }
                }
            ]
        }
    }
}